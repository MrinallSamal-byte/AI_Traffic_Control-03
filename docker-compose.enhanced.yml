version: '3.8'

services:
  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with TimescaleDB
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: transport_system
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d transport_system"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blockchain (Ganache)
  ganache:
    image: trufflesuite/ganache:latest
    ports:
      - "8545:8545"
    command: >
      --wallet.deterministic
      --wallet.accounts 10
      --wallet.defaultBalance 1000
      --chain.chainId 1337
      --server.host 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./ops/prometheus_alerts.yml:/etc/prometheus/alerts.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana_dashboards:/var/lib/grafana/dashboards
      - ./ops/grafana_provisioning:/etc/grafana/provisioning

  # Application Services (optional - can run manually)
  
  # Stream Processor
  stream-processor:
    build:
      context: .
      dockerfile: stream_processor/Dockerfile
    depends_on:
      - mosquitto
      - kafka
      - redis
      - timescaledb
    environment:
      - MQTT_HOST=mosquitto
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - DB_HOST=timescaledb
      - DB_USER=admin
      - DB_PASSWORD=password
      - DB_NAME=transport_system
    ports:
      - "5004:5004"
    profiles:
      - full-stack

  # ML Services
  ml-services:
    build:
      context: .
      dockerfile: ml_services/Dockerfile
    ports:
      - "5002:5002"
    volumes:
      - ./ml/models:/app/ml/models
    profiles:
      - full-stack

  # Blockchain Service
  blockchain-service:
    build:
      context: .
      dockerfile: blockchain/Dockerfile
    depends_on:
      - ganache
    environment:
      - BLOCKCHAIN_RPC_URL=http://ganache:8545
    ports:
      - "5003:5002"
    profiles:
      - full-stack

  # API Server
  api-server:
    build:
      context: .
      dockerfile: api_server/Dockerfile
    depends_on:
      - timescaledb
      - redis
    environment:
      - DB_HOST=timescaledb
      - DB_USER=admin
      - DB_PASSWORD=password
      - DB_NAME=transport_system
      - REDIS_HOST=redis
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - ADMIN_PASSWORD=admin123
      - OPERATOR_PASSWORD=operator123
    ports:
      - "5000:5000"
    profiles:
      - full-stack

volumes:
  postgres_data:
  grafana_data: