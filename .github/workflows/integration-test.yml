name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: admin
          POSTGRES_DB: transport_system
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_BROKER_ID: 1
        ports:
          - 9092:9092
      
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
      
      mosquitto:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Wait for services
      run: |
        sleep 30
        python -c "import psycopg2; psycopg2.connect(host='localhost', port=5432, database='transport_system', user='admin', password='password')"
    
    - name: Initialize database
      run: |
        PGPASSWORD=password psql -h localhost -U admin -d transport_system -f database/init.sql
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://admin:password@localhost:5432/transport_system
        REDIS_URL: redis://localhost:6379
        KAFKA_BROKERS: localhost:9092
        MQTT_BROKER: localhost:1883
      run: |
        python -m pytest tests/integration/ -v --tb=short
    
    - name: Run end-to-end test
      env:
        DATABASE_URL: postgresql://admin:password@localhost:5432/transport_system
        REDIS_URL: redis://localhost:6379
        KAFKA_BROKERS: localhost:9092
        MQTT_BROKER: localhost:1883
      run: |
        # Start services in background
        python stream_processor/processor.py &
        STREAM_PID=$!
        
        python api_server/app.py &
        API_PID=$!
        
        sleep 10
        
        # Run device simulator
        timeout 30 python device_simulator/simulator.py --count 5 || true
        
        # Check if data flows through system
        python -c "
import psycopg2
conn = psycopg2.connect('postgresql://admin:password@localhost:5432/transport_system')
cursor = conn.cursor()
cursor.execute('SELECT COUNT(*) FROM telemetry')
count = cursor.fetchone()[0]
print(f'Telemetry records: {count}')
assert count > 0, 'No telemetry data found'
"
        
        # Cleanup
        kill $STREAM_PID $API_PID || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          pytest-report.xml
          coverage.xml